#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import codecs
import collections
import hashlib
import json
import urllib2


# 文件夹ID，调用api获取
# https://grafana.com/docs/http_api/folder/#get-all-folders
g_grafanaFolderId = 0
# 一级业务
g_dashboardBusiL1 = ""
# 二级业务
g_dashboardBusiL2 = ""
# 模块
g_dashboardModule = ""
# 属性描述列表
g_attrList = []
# 输入文件的绝对路径文件夹，生成的文件都保存到该目录下
g_dirname = ""
# 用于生成go文件的文件名称
g_filename = ""
# 模块英文名，用于生成attr.go
g_dashboardModuleEn = ""


def AttentionStr(str, color):
    if color == "green":
        return "\033[1;32m%s\033[0m" % str
    elif color == "red":
        return "\033[1;31m%s\033[0m" % str


def ParseAttrFile(filePath):
    global g_dashboardBusiL1
    global g_dashboardBusiL2
    global g_dashboardModule
    global g_attrList
    global g_dirname
    global g_filename
    global g_dashboardModuleEn

    # 检查文件格式是否正确，
    if not os.path.isfile(filePath):
        return False
    realpath = os.path.realpath(filePath)
    g_dirname = os.path.dirname(realpath)
    g_filename = os.path.basename(realpath)
    fd = codecs.open(filePath, mode="r", encoding="utf-8")
    lineNo = 0
    validNo = 0
    pickBusi = False
    hasModuleName = False
    for line in fd:
        lineNo += 1
        if line.startswith("#") or line == "\r\n" or line == "\n":
            continue
        validNo += 1
        if validNo == 1:
            # 如果第一行就是属性，g_dashboardModuleEn取值为"attr"
            # 如果第一行是模块名，g_dashboardModuleEn取值为模块名
            cols = line.split(",")
            if len(cols) != 10:
                hasModuleName = True
                g_dashboardModuleEn = line.strip("\r\n").strip("\n")
                continue
            else:
                g_dashboardModuleEn = "attr"
                pass

        cols = line.split(",")
        if len(cols) != 10:
            print(AttentionStr(('line:%d error, missing coloum or "," incorrect' % lineNo), "red"))
            fd.close()
            return False

        if pickBusi == False:
            pickBusi = True
            g_dashboardBusiL1 = cols[2]
            g_dashboardBusiL2 = cols[3]
            g_dashboardModule = cols[4]
        else:
            if cols[2] != g_dashboardBusiL1 or cols[3] != g_dashboardBusiL2 or cols[4] != g_dashboardModule:
                print(AttentionStr(('line:%d error, business or module different' % lineNo), "red"))
                fd.close()
                return False

        if int(cols[0]) == 0:
            print(AttentionStr("id is 0 invalid", "red"))
            fd.close()
            return False
    fd.close()

    # 文件格式正确，获取相关值
    fd = codecs.open(filePath, mode="r", encoding="utf-8")
    validNo = 0
    for line in fd:
        if line.startswith("#") or line == "\r\n" or line == "\n":
            continue
        validNo += 1
        if validNo == 1 and hasModuleName == True:
            continue
        cols = line.split(",")
        attr = collections.OrderedDict()
        g_attrList.append(attr)
        attr["id"] = int(cols[0])
        attr["type"] = cols[1]
        attr["name"] = cols[5]
        attr["macro"] = cols[6]
        attr["min"] = int(cols[7])
        attr["max"] = int(cols[8])
        attr["owner"] = cols[9]
    fd.close()
    return True


def GenGoFile(dirname, filename, dashboardModuleEn, attrList):
    tmp = filename.replace(".desc", "")
    gofile = "%s/%s.go" % (dirname, tmp)
    fd = codecs.open(gofile, mode="w", encoding="utf-8")
    fd.write("// This file is automatically generated by %s\n\n" % sys.argv[0])
    fd.write("package %s\n\n" % dashboardModuleEn)
    fd.write("const (\n")
    for i in range(len(attrList)):
        attr = attrList[i]
        fd.write("\t%s = %d\n" % (attr["macro"], attr["id"]))
    fd.write(")\n")
    fd.close()
    print("Generate %s ...  %s" % (gofile, AttentionStr("success", "green")))


def GetGrafanaConfig(grafanaHost, grafanaAuthorization, uid):
    destUrl = "http://%s/api/dashboards/uid/%s" % (grafanaHost, uid)
    req = urllib2.Request(url=destUrl)
    req.add_header('Accept', 'application/json')
    req.add_header('Content-Type', 'application/json')
    req.add_header('Authorization', grafanaAuthorization)
    try:
        rsp = urllib2.urlopen(req)
    except Exception as e:
        return {}
    else:
        body = rsp.read()
        v = json.loads(body)
        return v


def GenGrafanaConfig(grafanaHost, grafanaAuthorization, grafanaDataSource, grafanaFolderId, dashboardBusiL1, dashboardBusiL2, dashboardModule, dirname, filename, attrList):
    title = "%s-%s-%s" % (dashboardBusiL1, dashboardBusiL2, dashboardModule)
    md5 = hashlib.md5()
    md5.update(title)
    uid = md5.hexdigest()[8:-8]
    oridb = GetGrafanaConfig(grafanaHost, grafanaAuthorization, uid)

    # gen
    view = collections.OrderedDict()
    view["folderId"] = grafanaFolderId
    view["overwrite"] = True
    view["message"] = "commit by tools"

    dashboard = collections.OrderedDict()
    view["dashboard"] = dashboard

    dashboard["title"] = title
    dashboard["uid"] = uid
    dashboard["id"] = None
    dashboard["gnetId"] = None
    dashboard["editable"] = True
    dashboard["graphTooltip"] = 0
    dashboard["timezone"] = "browser"
    dashboard["version"] = 0
    dashboard["iteration"] = 0
    dashboard["refresh"] = False
    dashboard["schemaVersion"] = 16
    dashboard["style"] = "dark"

    dashboard_tags_list = []
    dashboard["tags"] = dashboard_tags_list
    dashboardTag = "%s-%s" % (dashboardBusiL1, dashboardBusiL2)
    dashboard_tags_list.append(dashboardTag)

    dashboard_links_list = []
    dashboard["links"] = dashboard_links_list

    dashboard["description"] = ""

    dashboard_annotations = collections.OrderedDict()
    dashboard["annotations"] = dashboard_annotations
    dashboard_annotations_list = []
    dashboard_annotations["list"] = dashboard_annotations_list

    dashboard_annotations_list.append(collections.OrderedDict())
    dashboard_annotations_list[0]["builtIn"] = 1
    dashboard_annotations_list[0]["datasource"] = "-- Grafana --"
    dashboard_annotations_list[0]["enable"] = True
    dashboard_annotations_list[0]["hide"] = True
    dashboard_annotations_list[0]["iconColor"] = "rgba(0, 211, 255, 1)"
    dashboard_annotations_list[0]["name"] = "Annotations & Alerts"
    dashboard_annotations_list[0]["type"] = "dashboard"

    dashboard_templating = collections.OrderedDict()
    dashboard["templating"] = dashboard_templating
    dashboard_templating_list = []
    dashboard_templating["list"] = dashboard_templating_list

    templating_host_use_old = False
    if "dashboard" in oridb:
        if "templating" in oridb["dashboard"]:
            if "list" in oridb["dashboard"]["templating"]:
                for i in range(len(oridb["dashboard"]["templating"]["list"])):
                    if "name" in oridb["dashboard"]["templating"]["list"][i]:
                        if oridb["dashboard"]["templating"]["list"][i]["name"] == "host":
                            templating_host_use_old = True
                            dashboard_templating_list.append(oridb["dashboard"]["templating"]["list"][i])

    if templating_host_use_old == False:
        dashboard_templating_list.append(collections.OrderedDict())
        dashboard_templating_list[0]["name"] = "host"
        dashboard_templating_list[0]["label"] = "服务器"
        dashboard_templating_list[0]["allValue"] = ".+"
        dashboard_templating_list_current = collections.OrderedDict()
        dashboard_templating_list[0]["current"] = dashboard_templating_list_current
        dashboard_templating_list_current["text"] = "All"
        dashboard_templating_list_current["value"] = ["$__all"]
        dashboard_templating_list[0]["datasource"] = grafanaDataSource
        dashboard_templating_list[0]["hide"] = 0
        dashboard_templating_list[0]["includeAll"] = True
        dashboard_templating_list[0]["multi"] = True
        dashboard_templating_list[0]["options"] = []
        dashboard_templating_list[0]["query"] = "label_values(monitor_0_value, host)"
        dashboard_templating_list[0]["refresh"] = 1
        dashboard_templating_list[0]["regex"] = ""
        dashboard_templating_list[0]["sort"] = 1
        dashboard_templating_list[0]["tagValuesQuery"] = ""
        dashboard_templating_list[0]["tags"] = []
        dashboard_templating_list[0]["tagsQuery"] = ""
        dashboard_templating_list[0]["type"] = "query"
        dashboard_templating_list[0]["useTags"] = False

    dashboard_templating_list.append(collections.OrderedDict())
    dashboard_templating_list[1]["auto"] = False
    dashboard_templating_list[1]["auto_count"] = 300
    dashboard_templating_list[1]["auto_min"] = "5m"
    dashboard_templating_list[1]["current"] = {"text":"1m", "value":"1m"}
    dashboard_templating_list[1]["hide"] = 0
    dashboard_templating_list[1]["label"] = "数据粒度"
    dashboard_templating_list[1]["name"] = "interval"
    dashboard_templating_list_interval_options_list = []
    dashboard_templating_list[1]["options"] = dashboard_templating_list_interval_options_list
    dashboard_templating_list_interval_options_list.append(collections.OrderedDict())
    dashboard_templating_list_interval_options_list[0]["text"] = "1m"
    dashboard_templating_list_interval_options_list[0]["value"] = "1m"
    dashboard_templating_list_interval_options_list[0]["selected"] = True
    dashboard_templating_list_interval_options_list.append(collections.OrderedDict())
    dashboard_templating_list_interval_options_list[1]["text"] = "5m"
    dashboard_templating_list_interval_options_list[1]["value"] = "5m"
    dashboard_templating_list_interval_options_list[1]["selected"] = False
    dashboard_templating_list_interval_options_list.append(collections.OrderedDict())
    dashboard_templating_list_interval_options_list[2]["text"] = "10m"
    dashboard_templating_list_interval_options_list[2]["value"] = "10m"
    dashboard_templating_list_interval_options_list[2]["selected"] = False
    dashboard_templating_list_interval_options_list.append(collections.OrderedDict())
    dashboard_templating_list_interval_options_list[3]["text"] = "1h"
    dashboard_templating_list_interval_options_list[3]["value"] = "1h"
    dashboard_templating_list_interval_options_list[3]["selected"] = False
    dashboard_templating_list_interval_options_list.append(collections.OrderedDict())
    dashboard_templating_list_interval_options_list[4]["text"] = "1d"
    dashboard_templating_list_interval_options_list[4]["value"] = "1d"
    dashboard_templating_list_interval_options_list[4]["selected"] = False
    dashboard_templating_list[1]["query"] = "1m,5m,10m,1h,1d"
    dashboard_templating_list[1]["refresh"] = 2
    dashboard_templating_list[1]["type"] = "interval"

    dashboard["time"] = {"from":"now/d", "to":"now/d"}
    dashboard["timepicker"] = {"hidden":False, "nowDelay":"1m", "refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"], "time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]}

    panels = []
    dashboard["panels"] = panels

    panel1 = collections.OrderedDict()
    panels.append(panel1)
    panel1["title"] = "视图列表链接"
    panel1["type"] = "dashlist"
    panel1["id"] = 1
    panel1_pos = collections.OrderedDict()
    panel1["gridPos"] = panel1_pos
    panel1_pos["h"] = 10
    panel1_pos["w"] = 12
    panel1_pos["x"] = 0
    panel1_pos["y"] = 0
    panel1["folderId"] = grafanaFolderId
    panel1["headings"] = False
    panel1["recent"] = False
    panel1["search"] = True
    panel1["starred"] = False
    panel1["limit"] = 100
    panel1["query"] = ""
    panel1["links"] = []
    panel1["tags"] = [dashboardTag]

    panel2 = collections.OrderedDict()
    panels.append(panel2)
    panel2["title"] = "本视图告警列表"
    panel2["type"] = "alertlist"
    panel2["id"] = 2
    panel2_pos = collections.OrderedDict()
    panel2["gridPos"] = panel2_pos
    panel2_pos["h"] = 10
    panel2_pos["w"] = 12
    panel2_pos["x"] = 12
    panel2_pos["y"] = 0
    panel2["limit"] = 100
    panel2["links"] = []
    panel2["onlyAlertsOnDashboard"] = True
    panel2["show"] = "current"
    panel2["sortOrder"] = 1
    panel2["stateFilter"] = []

    for i in range(len(attrList)):
        attr = attrList[i]

        panel = collections.OrderedDict()
        panels.append(panel)
        panel["title"] = "%d %s / every $interval" % (attr["id"], attr["name"])
        panel["type"] = "graph"
        panel["id"] = 2 + (i + 1)
        panel["description"] = attr["macro"]
        panel["datasource"] = None
        panel["interval"] = "1m"

        x = (i % 3) * 8
        y = (i / 3) * 8 + 10
        panel_pos = collections.OrderedDict()
        panel["gridPos"] = panel_pos
        panel_pos["h"] = 8
        panel_pos["w"] = 8
        panel_pos["x"] = x
        panel_pos["y"] = y

        panel_targets = []
        panel["targets"] = panel_targets
        panel_target_A = collections.OrderedDict()
        panel_target_B = collections.OrderedDict()
        panel_targets.append(panel_target_A)
        panel_targets.append(panel_target_B)
        panel_target_A["refId"] = "A"
        panel_target_B["refId"] = "B"
        target_expr_A = ""
        target_expr_B = ""
        target_legend_format = ""
        if attr["type"] == "L":
            target_expr_A = 'sum(delta(monitor_%d_total{host=~"$host"}[$interval]))' % (attr["id"])
            target_expr_B = 'sum(delta(monitor_%d_total{host=~".+"}[1m]))' % (attr["id"])
            target_legend_format = ""
        elif attr["type"] == "S":
            target_expr_A = 'monitor_%d_value{host=~"$host"}' % (attr["id"])
            target_expr_B = 'monitor_%d_value{host=~".+"}' % (attr["id"])
            target_legend_format = "{{host}}"
        panel_target_A["expr"] = target_expr_A
        panel_target_B["expr"] = target_expr_B
        panel_target_A["format"] = "time_series"
        panel_target_B["format"] = "time_series"
        panel_target_A["hide"] = False
        panel_target_B["hide"] = True
        panel_target_A["instant"] = False
        panel_target_B["instant"] = False
        panel_target_A["interval"] = "$interval"
        panel_target_B["interval"] = "1m"
        panel_target_A["intervalFactor"] = 1
        panel_target_B["intervalFactor"] = 1
        panel_target_A["legendFormat"] = target_legend_format
        panel_target_B["legendFormat"] = target_legend_format

        panel_legend = collections.OrderedDict()
        panel["legend"] = panel_legend
        panel_legend["alignAsTable"] = False
        panel_legend["avg"] = False
        panel_legend["current"] = True
        panel_legend["hideEmpty"] = False
        panel_legend["hideZero"] = False
        panel_legend["max"] = True
        panel_legend["min"] = True
        panel_legend["rightSide"] = False
        panel_legend["show"] = True
        panel_legend["total"] = True
        panel_legend["values"] = True

        panel["aliasColors"] = {"{}":"#447ebc"}
        panel["bars"] = False
        panel["dashLength"] = 10
        panel["dashes"] = False
        panel["lines"] = True
        panel["linewidth"] = 2
        panel["links"] = []
        panel["nullPointMode"] = "null"
        panel["percentage"] = False
        panel["pointradius"] = 5
        panel["points"] = False
        panel["renderer"] = "flot"
        panel["seriesOverrides"] = []
        panel["spaceLength"] = 10
        panel["stack"] = False
        panel["steppedLine"] = False
        panel["fill"] = 1
        panel["transparent"] = False
        panel["timeFrom"] = None
        panel["timeShift"] = None
        panel["tooltip"] = {"shared":True, "sort":0, "value_type":"individual"}

        panel["xaxis"] = {"buckets":None, "mode":"time", "name":None, "show":True, "values":[]}
        panel["yaxes"] = [
            {"format":"none", "label":None, "logBase":1, "max":None, "min":"0", "decimals": 0, "show":True},
            {"format":"none", "label":None, "logBase":1, "max":None, "min":None, "decimals": 0, "show":False}
        ]

        # 注意：阈值线只支持第一个conditions的值，这里取max
        if attr["max"] == 0:
            panel["thresholds"] = []
        else:
            panel["thresholds"] = [
                {"colorMode": "critical", "fill": True, "line": True, "op": "gt", "value": attr["max"]}
            ]

        if attr["min"] != 0 or attr["max"] != 0:
            if attr["min"] < attr["max"] or attr["max"] == 0:
                alert = collections.OrderedDict()
                panel["alert"] = alert

                # 第一个判断的optype为"and"
                op_type_first_flag = True
                conditions = []
                alert["conditions"] = conditions
                if attr["max"] != 0:
                    op_type_first_flag = False
                    condition_max = collections.OrderedDict()
                    conditions.append(condition_max)
                    condition_max["evaluator"] = {"params":[attr["max"]], "type":"gt"}
                    condition_max["operator"] = {"type": "and"}
                    condition_max["query"] = {"params":["B", "5m", "now-2m"]}
                    condition_max["reducer"] = {"params":[], "type":"max"}
                    condition_max["type"] = "query"
                if attr["min"] != 0:
                    condition_min = collections.OrderedDict()
                    conditions.append(condition_min)
                    condition_min["evaluator"] = {"params":[attr["min"]], "type":"lt"}
                    if op_type_first_flag:
                        condition_min["operator"] = {"type":"and"}
                    else:
                        condition_min["operator"] = {"type":"or"}
                    condition_min["query"] = {"params":["B", "5m", "now-2m"]}
                    condition_min["reducer"] = {"params":[], "type":"min"}
                    condition_min["type"] = "query"

                alert["executionErrorState"] = "keep_state"
                alert["frequency"] = "60s"
                alert["handler"] = 1
                alert["message"] = attr["owner"]

                minstr = str(attr["min"])
                maxstr = str(attr["max"])
                brackets = "]"
                if attr["max"] == 0:
                    maxstr = "+inf"
                    brackets = ")"
                if attr["type"] == "L":
                    alert["name"] = "%s %d %s 1分钟量正常范围[%s,%s%s" % (dashboard["title"], attr["id"], attr["name"], minstr, maxstr, brackets)
                elif attr["type"] == "S":
                    alert["name"] = "%s %d %s 瞬时值正常范围[%s,%s%s" % (dashboard["title"], attr["id"], attr["name"], minstr, maxstr, brackets)
                alert["noDataState"] = "ok"
                alert["notifications"] = [{"id":1}]

    body = json.dumps(view, ensure_ascii=False, indent=2)
    tmp = filename.replace(".desc", "")
    grafanafile = "%s/%s.dashboard" % (dirname, tmp)
    fd = codecs.open(grafanafile, mode="w", encoding="utf-8")
    fd.write(body)
    fd.close()
    print("Generate %s ...  %s" % (grafanafile, AttentionStr("success", "green")))
    return grafanafile


def UpdateGrafanaConfig(grafanaHost, grafanaAuthorization, filename):
    f = open(filename)
    data2send = f.read()
    destUrl = "http://%s/api/dashboards/db" % grafanaHost
    req = urllib2.Request(url=destUrl, data=data2send)
    req.add_header('Accept', 'application/json')
    req.add_header('Content-Type', 'application/json')
    req.add_header('Authorization', grafanaAuthorization)
    rsp = urllib2.urlopen(req)
    result = rsp.read()
    v = json.loads(result)
    if v.has_key("status") and v["status"] == "success":
        print("Update %s to Grafana:%s ...  %s" % (filename, grafanaHost, AttentionStr("success", "green")))
        id = 0
        uid = ""
        ver = 0
        if v.has_key("id"):
            id = v["id"]
        if v.has_key("uid"):
            uid = v["uid"]
        if v.has_key("version"):
            ver = v["version"]
        print("    id : %d" % id)
        print("    uid : %s" % uid)
        print("    version : %d" % ver)
    else:
        print("Update %s to Grafana:%s ...  %s" % (filename, grafanaHost, AttentionStr("failed", "red")))
        print("    Result: %s" % result)
    f.close()


if __name__ == "__main__":
    import sys
    reload(sys)
    sys.setdefaultencoding("utf-8")

    configFileName = sys.argv[0].replace(".py", ".json")
    fd = codecs.open(configFileName, mode="r", encoding="utf-8")
    configStr = fd.read()
    configDict = json.loads(configStr)

    if len(sys.argv) == 2 or len(sys.argv) == 3:
        filePath = sys.argv[1]
        if len(sys.argv) == 3:
            g_grafanaFolderId = int(sys.argv[2])
    else:
        print("failed")
        print("Usage: python %s file [grafanaFolderId(default=0)]" % (sys.argv[0]))
        print(" e.g.: python %s ./model01/attr.desc 1" % (sys.argv[0]))
        print(" e.g.: python %s ./model02/attr.desc 2" % (sys.argv[0]))
        sys.exit()

    rc = ParseAttrFile(filePath)
    if rc != True:
        print("Parse %s failed" % (sys.argv[1]))
        sys.exit()

    # business
    GenGoFile(g_dirname, g_filename, g_dashboardModuleEn, g_attrList)
    for host in configDict["GrafanaHostList"]:
        filename = GenGrafanaConfig(host, configDict["GrafanaAuthorization"], configDict["GrafanaDataSource"], g_grafanaFolderId, g_dashboardBusiL1, g_dashboardBusiL2, g_dashboardModule, g_dirname, g_filename, g_attrList)
        UpdateGrafanaConfig(host, configDict["GrafanaAuthorization"], filename)
